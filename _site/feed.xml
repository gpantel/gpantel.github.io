<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-08-30T13:48:01-04:00</updated><id>http://localhost:4000/</id><title type="html">Scratchings on biomoleclar simulation and theory</title><subtitle>Posts from a PhD student about biomolecular simulation methods and analyses</subtitle><author><name>George A. Pantelopulos</name><email>gpantel@bu.edu</email></author><entry><title type="html">Generic LJ Simulator in OpenMM</title><link href="http://localhost:4000/computational-method/LJsimulation/" rel="alternate" type="text/html" title="Generic LJ Simulator in OpenMM" /><published>2019-08-29T02:30:00-04:00</published><updated>2019-08-29T02:30:00-04:00</updated><id>http://localhost:4000/computational-method/LJsimulation</id><content type="html" xml:base="http://localhost:4000/computational-method/LJsimulation/">&lt;p&gt;I present a script and JSON input file for building and running complex Lennard-Jones particle mixtures in 2D and 3D in a variety of conditions using OpenMM.&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; async=&quot;&quot; src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;
&lt;/script&gt;

&lt;h1 id=&quot;the-12-6-lennard-jones-lj-potential&quot;&gt;The 12-6 Lennard-Jones (LJ) potential.&lt;/h1&gt;

&lt;p&gt;The Lennard-Jones potential model is a very simple model that most-accurately describes the interactions of Noble gas elements. The Lennard-Jones potential defines the interaction between two atoms separated by distance &lt;script type=&quot;math/tex&quot;&gt;r&lt;/script&gt;:&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;U(r) = 4 \epsilon \left[ \left(\frac{\sigma}{r}\right)^{12} - \left(\frac{\sigma}{r}\right)^{6} \right]&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;The positive term, &lt;script type=&quot;math/tex&quot;&gt;4 \epsilon \left(\frac{\sigma}{r}\right)^{12}&lt;/script&gt; approximates the Pauli exclusion of electron-electron interactions (at short distance). The negative term, &lt;script type=&quot;math/tex&quot;&gt;-4 \epsilon \left(\frac{\sigma}{r}\right)^{6}&lt;/script&gt;, approximates the instantaneous dipole attraction between atoms; the London dispersion force. Each part of the potential and their sum look like this:
&lt;img src=&quot;http://localhost:4000/assets/Potentials/LennardJonesplot.png&quot; alt=&quot;FlatWellPotential&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure&lt;/strong&gt; The 12-6 Lennard-Jones potential (green) and its’ constituent parts.&lt;/p&gt;

&lt;p&gt;The simplicity of this model is very attractive for exploring general concepts in physics. Many coarse-grained force fields mostly consist of atoms described using Lennard-Jones potentials with harmonic potentials describing their connectivity. Particles described using only the Lennard-Jones potential are often called “Lennard-Jones particles”.&lt;/p&gt;

&lt;h1 id=&quot;reduced-units-of-the-lennard-jones-model&quot;&gt;Reduced units of the Lennard-Jones model.&lt;/h1&gt;

&lt;p&gt;In thinking about real systems, we need units to understand the relative size and scale of all things. Energies we often express in units like &lt;em&gt;kJ/mol&lt;/em&gt;, temperatures in &lt;em&gt;K&lt;/em&gt;, volumes in &lt;em&gt;nm&lt;sup&gt;3&lt;/sup&gt;&lt;/em&gt;, &lt;em&gt;et cetera&lt;/em&gt;. However, if a system is simple enough, it is easy to express thermodynamic quantities in terms of each other, such that all quantities are unitless, but can be related directly back to real, unit-having values, which can describe many systems &lt;em&gt;a la&lt;/em&gt; the &lt;a href=&quot;https://en.wikipedia.org/wiki/Theorem_of_corresponding_states&quot;&gt;Theorem of corresponding states&lt;/a&gt;. This idea that we can understand many real systems via studying systems using reduced units is another reason why Lennard-Jones simulations can be attractive for exploring new ideas.&lt;/p&gt;

&lt;p&gt;To perform MD simulations, it is necessary to define parameters like the time step, temperature, density. For equilateral systems of (&lt;script type=&quot;math/tex&quot;&gt;d&lt;/script&gt;) dimensions, the temperature (&lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt;), density (&lt;script type=&quot;math/tex&quot;&gt;\rho&lt;/script&gt;), integration time step &lt;script type=&quot;math/tex&quot;&gt;\tau&lt;/script&gt;, and langevin damping coefficient &lt;script type=&quot;math/tex&quot;&gt;\gamma&lt;/script&gt; are defined as:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Real Quantity&lt;/th&gt;
      &lt;th&gt;Conversion from Reduced Quantity (*)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\ k_B/ \epsilon^* T^*&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\rho&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;N \sigma^{*d} / \rho^*&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\tau&lt;/script&gt; (MD time step)&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\sqrt{ m^* \sigma^{*2} / \epsilon^*}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\gamma&lt;/script&gt; (Damping coefficient)&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\tau/2&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The reduced &lt;script type=&quot;math/tex&quot;&gt;\epsilon&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;\sigma&lt;/script&gt;, and mass (&lt;script type=&quot;math/tex&quot;&gt;m&lt;/script&gt;), for these equations use the weighted average of these quanitites for each &lt;script type=&quot;math/tex&quot;&gt;i^{th}&lt;/script&gt; LJ particle type relative to their ratio of system composition (&lt;script type=&quot;math/tex&quot;&gt;\alpha_i&lt;/script&gt;), out of &lt;script type=&quot;math/tex&quot;&gt;M&lt;/script&gt; particle types:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Weighted Average of Reduced Quantity&lt;/th&gt;
      &lt;th&gt;Definition&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\left&lt; \sigma^* \right&gt; %]]&gt;&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\sum_i^M \alpha_i \sigma_i&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;\ \ \ \ \ \ \ \ \ \ \alpha_i = n_i / \sum_i^M n_i&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\left&lt; \epsilon^* \right&gt; %]]&gt;&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{1}{M} \sum_i^M \sum_j^M \epsilon_{ij} \alpha_i&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\left&lt; m^* \right&gt; %]]&gt;&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\sum_i^M \alpha_i m_i&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;There is another, not so general reduced unit we use to think about conditions for phase separation in binary mixtures that is available as an input for this LJ simulator. In Flory-Huggins models the energetic cost of forming lattice contacts with a lattice site of differing type is expressed by the parameter &lt;script type=&quot;math/tex&quot;&gt;\chi&lt;/script&gt;. The reduced unit in these models is then expressed as the ratio &lt;script type=&quot;math/tex&quot;&gt;\frac{k_B T^*}{\chi}&lt;/script&gt;. We can define &lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt; in our simulations using a these reduced units, too, to perform LJ simulations to explore theories developed in such simple theoretical models or lattice simulations.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Quantity&lt;/th&gt;
      &lt;th&gt;Definition&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\chi_{int}&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;-\epsilon_{12} - \left( \frac{-\epsilon_{11} - \epsilon_{22}}{2} \right)&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;T^*&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{k_B T^*}{\chi_{int}} \frac{\chi_{int}}{k_B}&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;T&lt;/script&gt;&lt;/td&gt;
      &lt;td&gt;&lt;script type=&quot;math/tex&quot;&gt;\ k_B/ \epsilon^* T^*&lt;/script&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;In this case we refer to this as &lt;script type=&quot;math/tex&quot;&gt;\chi_{internal}&lt;/script&gt;, as the Flory-Huggins theory parameter &lt;script type=&quot;math/tex&quot;&gt;\chi&lt;/script&gt; is meant to fold in the contrubutions from entropy, and thus there is some difference between the results of the LJ model and Flory-Huggins theory at this value of &lt;script type=&quot;math/tex&quot;&gt;\chi&lt;/script&gt;.[1]&lt;/p&gt;

&lt;h1 id=&quot;a-few-example-simulations&quot;&gt;A few example simulations.&lt;/h1&gt;
&lt;p&gt;I’ve made a little set of scripts that make it very easy to run Lennard-Jones particle simulations in OpenMM using a simple input script. The script LJ_simulation.py takes care of building the system using Packmol, setting up the system in OpenMM, and handling two- and three-dimensional molecular dynamics simulations of these systems. It can run any number of different types of Lennard-Jones particles in any proportion, with the option of two different initial conditions. It outputs all information in reduced units, using the hacked up reducedstatedatareporter.py.&lt;/p&gt;

&lt;p&gt;Here are a few examples.&lt;/p&gt;

&lt;p&gt;A simulation with M=2, N=2000, where &lt;script type=&quot;math/tex&quot;&gt;\epsilon_{11}^*&lt;/script&gt; = &lt;script type=&quot;math/tex&quot;&gt;\epsilon_{22}^*&lt;/script&gt; = 4, &lt;script type=&quot;math/tex&quot;&gt;\epsilon_{12}^*&lt;/script&gt; = &lt;script type=&quot;math/tex&quot;&gt;\epsilon_{21}^*&lt;/script&gt; = 0.4, &lt;script type=&quot;math/tex&quot;&gt;\sigma_1^*&lt;/script&gt; = &lt;script type=&quot;math/tex&quot;&gt;\sigma_2^*&lt;/script&gt; = 1, &lt;script type=&quot;math/tex&quot;&gt;m_1^*&lt;/script&gt; = &lt;script type=&quot;math/tex&quot;&gt;m_2^*&lt;/script&gt; = 1, &lt;script type=&quot;math/tex&quot;&gt;T^*&lt;/script&gt; = 1, &lt;script type=&quot;math/tex&quot;&gt;\rho^*&lt;/script&gt; = 0.75, and &lt;script type=&quot;math/tex&quot;&gt;d&lt;/script&gt; = 2 and the system composition is at 50% type 1, and 50% type 2, running for 50,000,000 steps (at a rate of approx. 60,000,000 steps / hour on a GTX 2080 super), initiated from a mixed state:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Potentials/ex1.gif&quot; alt=&quot;FlatWellPotential&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The above simulation could also be defined using &lt;script type=&quot;math/tex&quot;&gt;\frac{k_B T^*}{\chi_{int}}&lt;/script&gt; = 2.3096 as the user input, rather than &lt;script type=&quot;math/tex&quot;&gt;T^*&lt;/script&gt; = 1.&lt;/p&gt;

&lt;p&gt;A simulation with &lt;script type=&quot;math/tex&quot;&gt;M&lt;/script&gt;=3, &lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt;=1000, where &lt;script type=&quot;math/tex&quot;&gt;\epsilon_{11}^*&lt;/script&gt; = &lt;script type=&quot;math/tex&quot;&gt;\epsilon_{12}^*&lt;/script&gt; = &lt;script type=&quot;math/tex&quot;&gt;\epsilon_{21}^*&lt;/script&gt; = &lt;script type=&quot;math/tex&quot;&gt;\epsilon_{22}^*&lt;/script&gt; = &lt;script type=&quot;math/tex&quot;&gt;\epsilon_{23}^*&lt;/script&gt; = &lt;script type=&quot;math/tex&quot;&gt;\epsilon_{32}^*&lt;/script&gt; = &lt;script type=&quot;math/tex&quot;&gt;\epsilon_{33}^*&lt;/script&gt; = &lt;script type=&quot;math/tex&quot;&gt;\epsilon_{13}^*&lt;/script&gt; = &lt;script type=&quot;math/tex&quot;&gt;\epsilon_{31}^*&lt;/script&gt; = 1, &lt;script type=&quot;math/tex&quot;&gt;\sigma_1^*&lt;/script&gt; = &lt;script type=&quot;math/tex&quot;&gt;\sigma_2^*&lt;/script&gt; = &lt;script type=&quot;math/tex&quot;&gt;\sigma_3^*&lt;/script&gt; = 1, &lt;script type=&quot;math/tex&quot;&gt;m_1^*&lt;/script&gt; = &lt;script type=&quot;math/tex&quot;&gt;m_2^*&lt;/script&gt; = &lt;script type=&quot;math/tex&quot;&gt;m_3^*&lt;/script&gt; = 1, &lt;script type=&quot;math/tex&quot;&gt;T^*&lt;/script&gt; = 2, &lt;script type=&quot;math/tex&quot;&gt;\rho^*&lt;/script&gt; = 0.8, and &lt;script type=&quot;math/tex&quot;&gt;d&lt;/script&gt; = 3 and the system composition is at 40% type 1, 40% type 2 and 20% type3, running for 200,000 steps, initiated from a stripe-shaped phase separation:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Potentials/ex2.gif&quot; alt=&quot;FlatWellPotential&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;A simulation with &lt;script type=&quot;math/tex&quot;&gt;M&lt;/script&gt;=3, &lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt;=1000, where &lt;script type=&quot;math/tex&quot;&gt;\epsilon_{11}^*&lt;/script&gt; = &lt;script type=&quot;math/tex&quot;&gt;\epsilon_{12}^*&lt;/script&gt; = &lt;script type=&quot;math/tex&quot;&gt;\epsilon_{21}^*&lt;/script&gt; = &lt;script type=&quot;math/tex&quot;&gt;\epsilon_{22}^*&lt;/script&gt; = &lt;script type=&quot;math/tex&quot;&gt;\epsilon_{23}^*&lt;/script&gt; = &lt;script type=&quot;math/tex&quot;&gt;\epsilon_{32}^*&lt;/script&gt; = &lt;script type=&quot;math/tex&quot;&gt;\epsilon_{33}^*&lt;/script&gt; = &lt;script type=&quot;math/tex&quot;&gt;\epsilon_{13}^*&lt;/script&gt; = &lt;script type=&quot;math/tex&quot;&gt;\epsilon_{31}^*&lt;/script&gt; = 1, &lt;script type=&quot;math/tex&quot;&gt;\sigma_1^*&lt;/script&gt; = &lt;script type=&quot;math/tex&quot;&gt;\sigma_2^*&lt;/script&gt; = &lt;script type=&quot;math/tex&quot;&gt;\sigma_3^*&lt;/script&gt; = 1, &lt;script type=&quot;math/tex&quot;&gt;m_1^*&lt;/script&gt; = &lt;script type=&quot;math/tex&quot;&gt;m_2^*&lt;/script&gt; = &lt;script type=&quot;math/tex&quot;&gt;m_3^*&lt;/script&gt; = 1, &lt;script type=&quot;math/tex&quot;&gt;T^*&lt;/script&gt; = 2, &lt;script type=&quot;math/tex&quot;&gt;\rho^*&lt;/script&gt; = 0.8, and &lt;script type=&quot;math/tex&quot;&gt;d&lt;/script&gt; = 3 and the system composition is at 40% type 1, 40% type 2 and 20% type3, running for 200,000 steps, initiated from a stripe-shaped phase separation. Now including an external potential to restrain particles to the stripe phase with widthscale = 0.95 and kwall = 20 (this potential is described later):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Potentials/ex3.gif&quot; alt=&quot;FlatWellPotential&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;a-bit-about-openmm-what-makes-it-nice-for-quickly-exploring-ideas-and-what-can-make-it-difficult-to-use&quot;&gt;A bit about OpenMM: What makes it nice for quickly exploring ideas and what can make it difficult to use.&lt;/h1&gt;

&lt;p&gt;OpenMM uses SWIG to generate C++ code from strings at the python API level to define custom potentials and integrators, and to modify simulation parameters during simulation. OpenMM also supports reading of the matured MD force field parameter file formats of CHARMM, AMBER, and GROMACS. This makes it possible to use OpenMM as a testbed for development of creative simulation methods by using simple models that can later be scaled up to production simulations. It also makes it possible to create totally new simulation methods that can be used without recompiling OpenMM.&lt;/p&gt;

&lt;p&gt;Sometimes, understanding how to write strings that will be correctly interpreted by OpenMM to do what you want can be difficult, so I will present how I do that for this LJ simulator as another example of how to use OpenMM. Reading the C++ code is the most sure-fire way to really get an idea of what to do at the python level if it’s not clear.&lt;/p&gt;

&lt;p&gt;For example, to accomplish two-dimensional simulations I needed to:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Create a custom velocity verlet langevin integrator (LJ_simulation.py)&lt;/li&gt;
  &lt;li&gt;Add a new integrator variable that is the Vec3 vector &amp;lt;1,1,0&amp;gt; (LJ_simulation.py)&lt;/li&gt;
  &lt;li&gt;Multiply all velocities by this new &amp;lt;1,1,0&amp;gt; vector when determining displacement, and later before determining kinetic energy (LJ_simulation.py)&lt;/li&gt;
  &lt;li&gt;Re-define the instantaneous temperature to account for the missing dimension in kinetic energy when printing output (reducedstatedatareporter.py)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But I had not seen a demonstration of how to do steps 1-3 anywhere, so I had to determine what to do by reading how variables are defined in the C++ program openmmapi/include/CustomIntegrator.h in the OpenMM source (not distributed with the conda installation – &lt;a href=&quot;https://github.com/openmm/openmm&quot;&gt;see the github&lt;/a&gt;) Step 4 was straightforward because it does not rely on interpreting and compiling a string.&lt;/p&gt;

&lt;h1 id=&quot;constructing-a-pair-interaction-specific-lennard-jones-potential-in-openmm&quot;&gt;Constructing a pair-interaction-specific Lennard-Jones potential in OpenMM.&lt;/h1&gt;

&lt;p&gt;A pretty flexible Lennard-Jones model should be able to adopt different interactions strengths between different types of Lennard-Jones particle. We want to be able to freely define how different LJ interaction energies will be formed between each &lt;script type=&quot;math/tex&quot;&gt;i^{th}&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;j^{th}&lt;/script&gt; atom type, &lt;script type=&quot;math/tex&quot;&gt;\epsilon_{ij}&lt;/script&gt;. The user is able to define this in the “epsilonAR_r” section of the JSON input file. We could also freely define how different LJ interaction lengths (&lt;script type=&quot;math/tex&quot;&gt;\sigma_{ij}&lt;/script&gt;) are formed, but we should stick with something more sane in this case, and apply the standard Lorentz combination rule to determine the &lt;script type=&quot;math/tex&quot;&gt;\sigma_{ij}&lt;/script&gt; parameters from each particle’s radius described by &lt;script type=&quot;math/tex&quot;&gt;\sigma_i&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Here, the array epsilonAR_r and the list sigmas_r correspond to the first example simulation, which has &lt;script type=&quot;math/tex&quot;&gt;M&lt;/script&gt;=2 particle types:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# epsilons are in reduced units, kJ/mol in OpenMM (i.e. 1.0 = epsilon, 2.0 = 2epislon)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;epsilonAR_r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#eps1-1, eps1-2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;4.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#eps2-1, eps2-2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;float64&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sigmas_r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# LJ sigmas in reduced units in order of particle type, nanometers in OpenMM&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sigmaAR_r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;float64&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sigmaAR_r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;true_divide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sigmas_r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sigmas_r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sigmaAR_r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sigmaAR_r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# the Lennard-Jones potential we will create in OpenMM accepts these arrays in list form&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;epsilonLST_r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;epsilonAR_r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ravel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tolist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sigmaLST_r&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sigmaAR_r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ravel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tolist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We now want to add a nonbonded force to the system that describes how all types of LJ particle interact. We can write out the standard 12-6 LJ potential, but with terms that describe specific pairs of atom types, a feature which is enabled by using the expressions “eps=epsilon(type1, type2)” and “sig=sigma(type1, type2)”…&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Constructing OpenMM simulation'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setDefaultPeriodicBoxVectors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vec3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;box_edge_r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vec3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;box_edge_r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vec3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;box_edge_r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;customNonbondedForce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CustomNonbondedForce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'4*eps*((sig/r)^12-(sig/r)^6); eps=epsilon(type1, type2); sig=sigma(type1, type2)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;customNonbondedForce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setNonbondedMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NonbondedForce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CutoffPeriodic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;customNonbondedForce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setCutoffDistance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;box_edge_r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.49&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nanometers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cutoff_r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nanometers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;customNonbondedForce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addTabulatedFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'epsilon'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Discrete2DFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;epsilonLST_r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;customNonbondedForce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addTabulatedFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'sigma'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Discrete2DFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sigmaLST_r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;customNonbondedForce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addPerParticleParameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After that we need to tell every particle to use this force, then add the force to the system.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# set the particle parameters&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;particle_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;particle_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;particle_numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;particle_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addParticle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;masses_r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;customNonbondedForce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addParticle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;particle_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addForce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customNonbondedForce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;disabling-changes-to-the-z-axial-positions-to-achieve-two-dimensional-simulations&quot;&gt;Disabling changes to the z-axial positions to achieve two-dimensional simulations.&lt;/h1&gt;

&lt;p&gt;OpenMM does not support two-dimensional simulations, however we can create a custom integrator that ignores the z-axis in computing velocity-related quantities, like displacement in the z-dimension and the z-dimension contribution to the kinetic energy. There are a few examples of how to make and manipulate custom integratiors within the comments of openmmapi/include/openmm/CustomIntegrator.h in the OpenMM source.&lt;/p&gt;

&lt;p&gt;To do this, a “dummy” variable, a Vec3 Vector of &amp;lt;1,1,0&amp;gt; needs to be created. This is used to multiply the velocities of each atom to remove z-axis kinetic energy. This also disables displacements into the z-dimension. I call this variable “dumv”.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dimensions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;integrator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addPerDofVariable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dumv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# makes a &amp;lt;1,1,1&amp;gt; vector&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;integrator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setPerDofVariableByName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dumv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vec3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In the custom integrator, we’ll multiply the velocity of each atom by “dumv” (&amp;lt;1,1,0&amp;gt;) to remove z-axial displacements.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dimensions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# To get a 2D system, make z-velocities zero when moving x&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;integrator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addComputePerDof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;x + v*dumv*dt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;integrator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addComputePerDof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;x + v*dt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The resulting velocities from each step of integration will be multiplied by “dumv” to remove the z-axial contribution to the kinetic energy.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dimensions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Remove the resulting z-velocities to get the correct Kinetic Energy&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;integrator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addComputePerDof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;v&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;v*dumv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is not quite everything that needs to be done. In two-dimensional systems the integrator will run just fine at a reference temperature of &lt;script type=&quot;math/tex&quot;&gt;T^{*}&lt;/script&gt;, but the reported instantaneous temperature will be off by 2/3. This is corrected in the hacked up “ReducedStateDataReporter” class that is imported from “reducedstatedatareporter.py”.&lt;/p&gt;

&lt;h1 id=&quot;creating-a-periodic-external-potential-to-restrain-particles-to-stripe-phases&quot;&gt;Creating a periodic external potential to restrain particles to stripe phases.&lt;/h1&gt;

&lt;p&gt;Phase separations that form in the thermodynamic limit can become unstable at insufficient system sizes given a system temperature and the interaction cost for forming contacts between species of opposites type. We explored this idea in lipid bilayers and an analytical two-dimensional Flory-Huggins lattice model in 2017.[2] Simulating lipid bilayers that &lt;em&gt;should&lt;/em&gt; phase separate, but will not phase separate at the small system sizes required to run sufficiently fast simulations in MD, can be biased to remain in a phase separated state by effectively creating a “wall” using a flat-well harmonic potential. Park and Im recently applied such a flat-well potential to stabilize a phase separations of POPC-DPPC and DOPC-DPPC binary lipid bilayers including unrestrained cholesterol to determine the partition coefficient of cholesterol to either phase.[3] We express this potential with the equation&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;U_{\mathrm{wall}}(x) = k_{\mathrm{wall}} \max\left( \mid x - x_0 \mid - (w \times \mathrm{widthscale}) \right)^2&lt;/script&gt;,&lt;/p&gt;

&lt;p&gt;where &lt;script type=&quot;math/tex&quot;&gt;x_0&lt;/script&gt; is the center of a stripe phase, &lt;script type=&quot;math/tex&quot;&gt;w&lt;/script&gt; is the radius of the restraint from the center, widthscale is a scaling factor on &lt;script type=&quot;math/tex&quot;&gt;w&lt;/script&gt;, and &lt;script type=&quot;math/tex&quot;&gt;k_{\mathrm{wall}}&lt;/script&gt; is the biasing force.&lt;/p&gt;

&lt;p&gt;Here is an illustration:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Membrane/FlatWellPotential.png&quot; alt=&quot;FlatWellPotential&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure&lt;/strong&gt;: Flat well potential effectively creating a soft wall enforcing a phase separation in an equimolar binary mixture.&lt;/p&gt;

&lt;p&gt;This flat-well potential can be expressed in the following form in OpenMM:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;flatres&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CustomExternalForce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'forcewall * (px^2); &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;                               px = max(0, delta); &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;                               delta = r - droff; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;                               r = abs(periodicdistance(x, y, z, x0, y, z));'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;flatres&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addGlobalParameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'forcewall'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forcewall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;flatres&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addGlobalParameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'droff'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;flatres&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addPerParticleParameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;where periodicdistance is a special function in CustomExternalForce that enforces distances are measured over the PBC. Without this, particles will fly from one side of the box to the other once passing through the PBC. It would be easy to change this potential to restrain “dot” phases too.&lt;/p&gt;

&lt;h1 id=&quot;parameters-of-the-json-input-file&quot;&gt;Parameters of the JSON input file.&lt;/h1&gt;

&lt;p&gt;To easily run Lennard-Jones simulation with reduced units in OpenMM, the script LJ_simulation.py, which loads reducedstatedatareporter.py to record thermodynamic quantities and build systems using Packmol can be controlled externally using JSON input files which are loaded as a command line argument.&lt;/p&gt;

&lt;p&gt;For example 1, we run use the following JSON file as an input “python LJ_simulation.py ex1.json”&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;pdb_prefix&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ex1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;dcd_prefix&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ex1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;nc_prefix&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ex1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;data_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ex1.dat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;&quot;initial_condition&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mixed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;N&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;T_r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;density_r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;dimensions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;particle_ratios&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;sigmas_r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;masses_r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;epsilonAR_r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;&quot;numsteps&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;         &lt;span class=&quot;mi&quot;&gt;50000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;data_interval&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;coordinate_interval&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;frcvel_interval&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;platform_type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;CUDA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;&quot;minimization&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;restraint_widthscale&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;forcewall&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;10.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;enable_restraint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;“pdb_prefix”&lt;/strong&gt; is the name prefix of .pdb files from system construction and minimization&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“dcd_prefix”&lt;/strong&gt; is the name prefix of a .dcd file containing the simulation trajectory&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“nc_prefix”&lt;/strong&gt; is the name prefix of a .nc NetCDF file containing the simulation velocities and forces (Optional)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“data_name”&lt;/strong&gt; is the name of an output text file written from ReducedStateDataReporter. This also names a .tcl script for quickly loading a rudimentary visualization in VMD.
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“initial_condition”&lt;/strong&gt; set Packmol to construct either a randomly-mixed or phase-separated initial condition&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“N”&lt;/strong&gt; the total number of particles in the system&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“T_r”&lt;/strong&gt; the reduced temperature&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“density_r”&lt;/strong&gt; the reduced density&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“dimensions”&lt;/strong&gt; the number of dimensions (2 or 3)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“particle_ratios”&lt;/strong&gt; the relative ratio of each particle type, in any proportion. This gets normalized later.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“sigmas_r”&lt;/strong&gt; the reduced Lennard-Jones &lt;script type=&quot;math/tex&quot;&gt;\sigma&lt;/script&gt; of each particle type&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“masses_r”&lt;/strong&gt; the reduced mass of each particle type&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“epsilonAR_r”&lt;/strong&gt; the reduced, pair-type-specific Lennard-Jones &lt;script type=&quot;math/tex&quot;&gt;\epsilon&lt;/script&gt;s&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“numsteps”&lt;/strong&gt; the number of MD steps to perform&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“data_interval”&lt;/strong&gt; thermodynamic quantities and simulation progress recorded during simulation&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“coordinate_interval”&lt;/strong&gt; the coordinate writing frequency (.dcd file)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“frcvel_interval”&lt;/strong&gt; the force and velocities writing frequency (.nc file; Optional)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“platform_type”&lt;/strong&gt; choice of computation platform. CUDA, OpenCL, or CPU
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“minimization”&lt;/strong&gt; turns minimization on/off with booleans “true”/”false”&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“restraint_widthscale”&lt;/strong&gt; scales width of the flat-well restraint (1=edge-to-edge of the initial stripe phase), if enabled&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“forcewall”&lt;/strong&gt; kwall flat-well restraint&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;“enable_restraint”&lt;/strong&gt; turn the flat-well restraint on/off with the booleans “true”/”false”. Might explode if simulation is initiated from “initial_condition”: “mixed”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As mentioned earlier, LJ_simulation.py can also take temperature defined via &lt;script type=&quot;math/tex&quot;&gt;\frac{k_B T^*}{\chi_{int}&lt;/script&gt; instead of &lt;script type=&quot;math/tex&quot;&gt;T^*&lt;/script&gt;. This can be done by defining &lt;strong&gt;“kbT_chi&lt;/strong&gt; instead of &lt;strong&gt;“T_r”&lt;/strong&gt;. An example of this is given in ex1-kbT_chi.json.&lt;/p&gt;

&lt;p&gt;LJ_simulation.py can take restart files as inputs and write them as outputs after simulation. These are controlled by the optional, additional parameters &lt;strong&gt;“rstin_prefix”&lt;/strong&gt; and &lt;strong&gt;“rstout_prefix”&lt;/strong&gt;, which name these files without an extension.&lt;/p&gt;

&lt;p&gt;LJ_simulation.py can also optionally &lt;em&gt;not&lt;/em&gt; save the NetCDF file containing positions, forces, and velocities. If you don’t want this, or want to save space, you can choose to not define &lt;strong&gt;“nc_prefix”&lt;/strong&gt; and &lt;strong&gt;“frcvel_interval”&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;One warning: I do not suggest using minimization. For two-dimensional systems minimization can move particles along the z-axis, and I do not think it is possible to correct this behavior without modifiying code that would need to be recompiled. Additionally, Packmol does a good job of constructing the system, so minimization should not be necessary in three-dimensional systems either.&lt;/p&gt;

&lt;p&gt;Precompiled &lt;a href=&quot;http://docs.openmm.org&quot;&gt;OpenMM&lt;/a&gt; can be installed using conda (I suggest using &lt;a href=&quot;https://docs.conda.io/en/latest/&quot;&gt;Miniconda&lt;/a&gt;). I strongly suggest reading the User manual and following the instructions to set up CUDA if you have a NVIDIA GPU. Parmed is requiredto write the NetCDF .nc file containing forces and velocities, which can also be installed with conda.
&lt;a href=&quot;http://m3g.iqm.unicamp.br/Packmol/home.shtml&quot;&gt;Packmol&lt;/a&gt; is  easy to compile. JSON can be installed using conda, too.
You need to set the path to Packmol on your local computer in LJ_simulator.py for the variable “path_to_Packmol”.&lt;/p&gt;

&lt;p&gt;The python scripts that perform these simulations are available on my github at &lt;a href=&quot;https://github.com/gpantel/MD_methods-and-analysis/blob/master/LJsimulator&quot;&gt;https://github.com/gpantel/MD_methods-and-analysis/blob/master/LJsimulator&lt;/a&gt;, in addition to input files to perform these three example simulations.&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Chremos, A., Nikoubashman, A. &amp;amp; Panagiotopoulos, A. Z. Flory-Huggins parameter χ, from binary mixtures of Lennard-Jones particles to block copolymer melts. J. Chem. Phys. 140, 1–10 (2014).&lt;/li&gt;
  &lt;li&gt;Pantelopulos, G. A., Nagai, T., Bandara, A., Panahi, A. &amp;amp; Straub, J. E. Critical size dependence of domain formation observed in coarse-grained simulations of bilayers composed of ternary lipid mixtures. J. Chem. Phys. 147, 095101 (2017).&lt;/li&gt;
  &lt;li&gt;Park, S. &amp;amp; Im, W. Quantitative Characterization of Cholesterol Partitioning between Binary Bilayers. J. Chem. Theory Comput. 14, 2829–2833 (2018).&lt;/li&gt;
&lt;/ol&gt;</content><author><name>George A. Pantelopulos</name><email>gpantel@bu.edu</email></author><summary type="html">I present a script and JSON input file for building and running complex Lennard-Jones particle mixtures in 2D and 3D in a variety of conditions using OpenMM.</summary></entry><entry><title type="html">Implicit Membrane REMD Structures of Full-length C99 protein</title><link href="http://localhost:4000/analysis-method/implicitC99/" rel="alternate" type="text/html" title="Implicit Membrane REMD Structures of Full-length C99 protein" /><published>2018-07-06T07:00:00-04:00</published><updated>2018-07-06T07:00:00-04:00</updated><id>http://localhost:4000/analysis-method/implicitC99</id><content type="html" xml:base="http://localhost:4000/analysis-method/implicitC99/">&lt;p&gt;I briefly discuss preparation of full-length C99 simulations in GBSW implicit membranes using REMD and provide prepresentative structures from  clustering.&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; async=&quot;&quot; src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;
&lt;/script&gt;

&lt;h1 id=&quot;c99-a-99-residue-long-c-terminus-of-amyloid-precursor-protein-is-the-precursor-to-amyoid-beta-abeta&quot;&gt;C99, a 99-residue long C-terminus of Amyloid Precursor Protein, is the precursor to amyoid beta A&lt;script type=&quot;math/tex&quot;&gt;\beta&lt;/script&gt;.&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.uniprot.org/uniprot/P05067&quot;&gt;Amyloid precursor protein (APP)&lt;/a&gt; is a (canonically) 770-residue long protein central to the amyloid cascade hypothesis of Alzheimer’s Disease (AD).[1] APP is cleaved by either &lt;script type=&quot;math/tex&quot;&gt;\alpha&lt;/script&gt;- or &lt;script type=&quot;math/tex&quot;&gt;\beta&lt;/script&gt;-secretase outside of cellular membranes, primarily producing 83- or 99-residue long C-terminal fragments known as C83 or C99. In the amyloid cascade, C99 is then cleaved by &lt;script type=&quot;math/tex&quot;&gt;\gamma&lt;/script&gt;-secretase in its transmembrane region, resulting in one of many possible lengths of &lt;script type=&quot;math/tex&quot;&gt;A\beta&lt;/script&gt; (primarily 38, 40, 42, 43), which can be selected by changing the structural ensemble of C99 and thus the point of cleavage on C99 by &lt;script type=&quot;math/tex&quot;&gt;\gamma&lt;/script&gt;-secretase. It is these longer fragments, &lt;script type=&quot;math/tex&quot;&gt;A\beta_{42}&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;A\beta_{43}&lt;/script&gt;, which form oligomers, fibrils, and tangles which are implicated in AD.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Membrane/APP_cleavageCartoon.png&quot; alt=&quot;APP cartoon&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure:&lt;/strong&gt; Cartoon of C-terminal region of APP. Scissors show the approximate locations of &lt;script type=&quot;math/tex&quot;&gt;\alpha&lt;/script&gt;-, &lt;script type=&quot;math/tex&quot;&gt;\beta&lt;/script&gt;-, and &lt;script type=&quot;math/tex&quot;&gt;\gamma&lt;/script&gt;-secretase cleavage sites on APP. In membranes of sufficient cholesterol concentration lipid raft domains form, rich in saturated lipid and cholesterol, to which APPs partition. In raft domains APP colocalizes with &lt;script type=&quot;math/tex&quot;&gt;\beta&lt;/script&gt;-secretase and C99 with &lt;script type=&quot;math/tex&quot;&gt;\gamma&lt;/script&gt;-secretase. At low cholesterol concentrations APP will colocalize with &lt;script type=&quot;math/tex&quot;&gt;\alpha&lt;/script&gt;-secretase, avoiding the amyloid cascade.&lt;/p&gt;

&lt;p&gt;There are many important mutations that have been identified in the brains of AD patients which appear in the &lt;em&gt;extra&lt;/em&gt;-membrane N- and C-terminal domains of C99. Additionally, the N-terminus of C99 is likely critical to C99-&lt;script type=&quot;math/tex&quot;&gt;\gamma&lt;/script&gt;-secretase binding and the C-terminus of C99 is involved in interactions with many cytoplasmic proteins. Part of the N- and C-terminal domains of C99 have been evidenced to be intrinsically disordered, and thus the structural ensemble of C99 in these domains had not been resolved. The body of work resolving part of the N- and C-terminal structure of C99 and the key residues present in these termini were summarized in &lt;a href=&quot;https://www.sciencedirect.com/science/article/pii/S0005273618301123&quot;&gt;our recent publication in Biochimica et Biophysica Acta (BBA) - Biomembranes&lt;/a&gt;. In addition to this, we summarized the body of work that has formed our understanding of membrane environment effects on the C99 transmembrane domain structural ensmeble.&lt;/p&gt;

&lt;h1 id=&quot;preparation-of-the-full-length-c99-protein-from-experimental-data&quot;&gt;Preparation of the full-length C99 protein from experimental data.&lt;/h1&gt;
&lt;p&gt;Though the transmembrane domain of C99 has an NMR-resolved structure (PDB: 2LP1),[2] the full-length structure of C99 has not been resolved via experimenal methods. However, there are backbone chemical shift assignments for the majority of the C99 sequence, determined via solution NMR in LMPG micelles by Sanders and coworkers (BMRB: 15775).[3]&lt;/p&gt;

&lt;p&gt;We modelled the initial structure of C99 via a combination of structure from simulation and backbone chemical shifts (13C, 15N, 1H) using (1) &lt;a href=&quot;https://spin.niddk.nih.gov/NMRPipe/talos/&quot;&gt;TALOS+&lt;/a&gt;, an emperical method for assigning dihedral angles from backbone chemical shifts. (2) Re-assignment of the transmembrane domain (residues 23-55) dihedral angles to those observed in the “Gly-in” structure of C99 homodimers.[4] (3) Changing the &lt;script type=&quot;math/tex&quot;&gt;\psi&lt;/script&gt; angle of H14 and the &lt;script type=&quot;math/tex&quot;&gt;\phi&lt;/script&gt; angle Q82 both by 180° in order to recover more accurate insertion depths of C99 residues, compared to past experimental measurements in bilayers and bicelles. (4) Assignment of rotomeric states of sidechains via the &lt;a href=&quot;http://dunbrack.fccc.edu/bbdep2010/&quot;&gt;rotamer library of Shapovalov and Dunbrack&lt;/a&gt;. (5) Assignment of pH 7 protonation states using the AddH program in UCSF Chimera. (6) Atom renaming for CHARMM format, addition of caps to N- and C-termini, and generation of PSF file using &lt;a href=&quot;http://www.charmm-gui.org/&quot;&gt;CHARMM-GUI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Membrane/C99_preparationScheme.png&quot; alt=&quot;APP cartoon&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure:&lt;/strong&gt; The process used to construct the initial state of full-length C99. (1) TALOS+ predicts dihedral from backbone NMR, (2) transmembrane domain dihedrals reaassigned based on “Gly-in” motif, (3) H14 &lt;script type=&quot;math/tex&quot;&gt;\psi&lt;/script&gt; and Q82 &lt;script type=&quot;math/tex&quot;&gt;\phi&lt;/script&gt; rotated 180° to get better agreement with EPR (stars) and NMR (cyan hydrophilic probe signal; blue hydrophobic probe signal), proposed structure insertion in dashed lines, (4) rotamer assignment, (5) protonation state assignment, and (6) atom renaming, terminal capping, and PSF file generation.&lt;/p&gt;

&lt;h1 id=&quot;gbsw-implicit-membrane-and-remd-simulation&quot;&gt;GBSW Implicit Membrane and REMD simulation.&lt;/h1&gt;

&lt;p&gt;Given the complexity and length of the extra-membrane domains of C99 we initiated studies of the full-length sequence of C99 using the Generalized Born with a simple SWitching (GBSW)[5] implicit membrane model and replica exchange molecular dynamics (REMD).[6] I may provide a brief explanation of GBSW in the future. &lt;a href=&quot;https://gpantel.github.io/computational-method/MSST/&quot;&gt;I wrote a brief explanation of REMD in a previous post.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A Temperature REMD tutorial using REPDSTR in CHARMM has previously been written on &lt;a href=&quot;https://www.charmmtutorial.org/index.php/Temperature_replica_exchange&quot;&gt;charmmtutorial.org&lt;/a&gt; by Tim Miller. A GBSW membrane tutorial has been written by Wonpil Im and Jianhan Chen on &lt;a href=&quot;https://mmtsb.org/workshops/mmtsb-ctbp_workshop_2009/Tutorials/GBSW_Tutorial/GBSW_Tutorial.html&quot;&gt;mmtsb.org&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;representative-structures-from-gbsw-remd-simulation-determined-using-calpha-and-dihedral-pca-of-n--and-c-terminal-domains&quot;&gt;Representative structures from GBSW REMD simulation determined using C&lt;script type=&quot;math/tex&quot;&gt;\alpha&lt;/script&gt; and dihedral PCA of N- and C-terminal domains.&lt;/h1&gt;

&lt;p&gt;To precicely form clusters of C99 structures sampled at 310 K in these 30-, 35-, and 40-Å thick membranes over 130, 160, and 460 ns REMD simulations, we performed PCA of combined C&lt;script type=&quot;math/tex&quot;&gt;\alpha&lt;/script&gt; and dihedral angle data across all ensembles of N- and C-terminal domains (separately), using the three largest eigenmodes of each PCA to obtain a 12-dimensional space in which conformational clustering of principal components was performed using gaussian mixture models.&lt;/p&gt;

&lt;p&gt;For the benefit of other researchers, I’ve uploaded the final structure assigned to each of the 16 conformational cluster in these &lt;a href=&quot;https://github.com/gpantel/MD_methods-and-analysis/tree/master/structures/30ang_GBSWfullC99&quot;&gt;30-&lt;/a&gt;, &lt;a href=&quot;https://github.com/gpantel/MD_methods-and-analysis/tree/master/structures/35ang_GBSWfullC99&quot;&gt;35-&lt;/a&gt;, and &lt;a href=&quot;https://github.com/gpantel/MD_methods-and-analysis/tree/master/structures/40ang_GBSWfullC99&quot;&gt;40-Å&lt;/a&gt; thick membranes to my github, including all PSF files generated by CHARMM-GUI.&lt;/p&gt;

&lt;p&gt;For more details on our work, please read our manuscript:
G.A. Pantelopulos, J.E. Straub, D. Thirumalai, &amp;amp; Y. Sugita “Structure of APP-C99&lt;sub&gt;1–99&lt;/sub&gt; and implications for role of extra-membrane domains in function and oligomerization,” &lt;em&gt;BBA Biomembr.&lt;/em&gt; (2018) doi:10.1016/j.bbamem.2018.04.002&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;J.A. Hardy &amp;amp; G.A. Higgins, “Alzhimer’s Disease: The Amyloid Cascade Hypothesis,” &lt;em&gt;Science&lt;/em&gt; &lt;strong&gt;256&lt;/strong&gt; 184-185 (1992).&lt;/li&gt;
  &lt;li&gt;P.J. Barrett, Y. Song, W.D. Van Horn, E.J. Hustedt, J.M. Schafer, A. Hadziselimovic, A.J. Beel, C.R. Sanders, “The Amyloid Precursor Protein Has a Flexible Transmembrane Domain and Binds Cholesterol,” &lt;em&gt;Science&lt;/em&gt; &lt;strong&gt;336&lt;/strong&gt; 1168-1171 (2012)&lt;/li&gt;
  &lt;li&gt;A. Beel, C. Mobley, H. Kim, F. Tian, A. Hadziselimovic, B. Jap, J. Prestegard, &amp;amp; C. Sanders, “Structural Studies of the Transmembrane C-Terminal Domain of the Amyloid Precursor Protein (APP): Does APP Function as a Cholesterol Sensor?,”  &lt;em&gt;Biochemistry&lt;/em&gt; &lt;strong&gt;47&lt;/strong&gt;, 9428-9446 (2008).&lt;/li&gt;
  &lt;li&gt;L. Dominguez, L. Foster, J.E. Straub, &amp;amp; Thirumalai, “Impact of membrane lipid composition on the structure and stability of the transmembrane domain of amyloid precursor protein,” &lt;em&gt;Proc. Natl. Acad. Sci.&lt;/em&gt; &lt;strong&gt;113&lt;/strong&gt; E5281–E5287 (2016).&lt;/li&gt;
  &lt;li&gt;W. Im, M. Feig, &amp;amp; C.L. Brooks, “An Implicit Membrane Generalized Born Theory for the Study of Structure, Stability, and Interactions of Membrane Proteins,” &lt;em&gt;Biophys. J.&lt;/em&gt; &lt;strong&gt;85&lt;/strong&gt; 2900–2918 (2003).&lt;/li&gt;
  &lt;li&gt;Y. Sugita, &amp;amp; Y. Okamoto, “Replica exchange molecular dynamics method for protein folding simulation,” &lt;em&gt;Chem. Phys. Lett.&lt;/em&gt; &lt;strong&gt;314&lt;/strong&gt; 141–151 (1999).&lt;/li&gt;
&lt;/ol&gt;</content><author><name>George A. Pantelopulos</name><email>gpantel@bu.edu</email></author><summary type="html">I briefly discuss preparation of full-length C99 simulations in GBSW implicit membranes using REMD and provide prepresentative structures from clustering.</summary></entry><entry><title type="html">Lipid Bilayer Phase Diagrams and Phase Diagram Evaluation Methods</title><link href="http://localhost:4000/computational-method/phasediagramsampling/" rel="alternate" type="text/html" title="Lipid Bilayer Phase Diagrams and Phase Diagram Evaluation Methods" /><published>2017-10-06T10:00:00-04:00</published><updated>2017-10-06T10:00:00-04:00</updated><id>http://localhost:4000/computational-method/phasediagramsampling</id><content type="html" xml:base="http://localhost:4000/computational-method/phasediagramsampling/">&lt;p&gt;I post some notes I wrote about ternary lipid bilayer phase diagrams and phase diagram sampling methods.&lt;/p&gt;

&lt;p&gt;An embedded PDF window displaying &lt;a href=&quot;http://localhost:4000/assets/PDF/lipidPhaseNotes.pdf&quot;&gt;this file&lt;/a&gt; should pop up.&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; async=&quot;&quot; src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;
&lt;/script&gt;

&lt;embed src=&quot;http://localhost:4000/assets/PDF/lipidPhaseNotes.pdf&quot; type=&quot;application/pdf&quot; /&gt;</content><author><name>George A. Pantelopulos</name><email>gpantel@bu.edu</email></author><summary type="html">I post some notes I wrote about ternary lipid bilayer phase diagrams and phase diagram sampling methods.</summary></entry><entry><title type="html">How to Determine When a Lipid Bilayer is Phase Separated</title><link href="http://localhost:4000/analysis-method/misciblitypoint/" rel="alternate" type="text/html" title="How to Determine When a Lipid Bilayer is Phase Separated" /><published>2017-08-31T10:00:00-04:00</published><updated>2017-08-31T10:00:00-04:00</updated><id>http://localhost:4000/analysis-method/misciblitypoint</id><content type="html" xml:base="http://localhost:4000/analysis-method/misciblitypoint/">&lt;p&gt;I discuss the definition of lipid miscibility point used in experiment and determine the equivalent size-depedndent binary mixing entropy for a 2D lattice.&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; async=&quot;&quot; src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;
&lt;/script&gt;

&lt;h1 id=&quot;how-do-we-know-when-a-lipid-bilayer-is-phase-separated&quot;&gt;How do we know when a lipid bilayer is phase separated?&lt;/h1&gt;

&lt;p&gt;Several people working on simulations of lipid phase separation have asked the question “How do I know when a bilayer is really phase separated?” There is no obvious answer. The degree of any anisotropic mixing within &lt;em&gt;any&lt;/em&gt; system seems to behave as a continous transition as dependent on various variables, such as temperature, system size, or relative concentration of types of molecules.&lt;/p&gt;

&lt;p&gt;What would be very convenient for people performing &lt;em&gt;simulations&lt;/em&gt; of phase-separating systems, though, is to find a way to relate their results to experimental observations.&lt;/p&gt;

&lt;p&gt;In the case of lipid bilayers, experimentalists have defined the “miscibility point,” at which they assign miscibiliy temperatures, to correspond to the point where 50% of liquid ordered (L&lt;sub&gt;o&lt;/sub&gt;) domain-forming lipids are miscible with liquid disordered (L&lt;sub&gt;d&lt;/sub&gt;) domain-forming lipids. For example, in the works of Bakht and London, they prepare small unilamellar vesicles (SUVs) of phase-separating lipid mixtures and measure the flourescence of probes (of fluorescence &lt;em&gt;F&lt;/em&gt;) which are quenced in the presence of L&lt;sub&gt;d&lt;/sub&gt; phase (of fluorescence &lt;em&gt;F&lt;sub&gt;0&lt;/sub&gt;&lt;/em&gt;), and report the ratio &lt;em&gt;F/F&lt;sub&gt;0&lt;/sub&gt;&lt;/em&gt;.[1,2] As a function of temperature, the ratio &lt;em&gt;F/F&lt;sub&gt;0&lt;/sub&gt;&lt;/em&gt;  follows a sigmoid function as dependent on temperature, and the inflection point of this function is believed to correspond to 50% miscibility of L&lt;sub&gt;o&lt;/sub&gt; and L&lt;sub&gt;d&lt;/sub&gt; domains, where they assign the miscibility teperature.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Membrane/FF0_T.jpg&quot; alt=&quot;Fluorescence Miscibility&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure:&lt;/strong&gt; Illustration of &lt;em&gt;F/F&lt;sub&gt;0&lt;/sub&gt;&lt;/em&gt; fluorescence measurement used to determing miscibility point, which is assigned as the point of inflection in &lt;em&gt;F/F&lt;sub&gt;0&lt;/sub&gt;(T)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Veatch and Keller also assign the “miscibility point” to corespond to the point when 50% of L&lt;sub&gt;o&lt;/sub&gt; domain-forming lipids are miscible with L&lt;sub&gt;d&lt;/sub&gt; domain-forming lipids in giant unilamellar vesicle (GUV) fluorescence experiments.[3,4] We can find the point where 50% of L&lt;sub&gt;o&lt;/sub&gt; domain-forming lipids are miscible with L&lt;sub&gt;d&lt;/sub&gt; domain-forming lipids simulation by evaluating the mixing entropy of a binary mixture on a hexagonal lattice monolayer, which happens to be very similar to a lipid bilayer for a few reasons.&lt;/p&gt;

&lt;h1 id=&quot;-miscibilities-of-binary-mixtures-on-2d-hexagonal-lattices&quot;&gt;% Miscibilities of binary mixtures on 2D hexagonal lattices&lt;/h1&gt;
&lt;p&gt;Each monolayer of a lipid bilayer can easily be thought of as a quasi-2D structure, and just like any 2D surface, lipids within monolayers are, on average, coordinated with six surrounding lipids.[5] Additionally, phase-separated bilayers (paticularly macroscopic separations, visible via microscopy) show strongly regstered domains – that is, L&lt;sub&gt;o&lt;/sub&gt; domains lie on top of L&lt;sub&gt;o&lt;/sub&gt; domains, and L&lt;sub&gt;d&lt;/sub&gt; domains lie on top of L&lt;sub&gt;d&lt;/sub&gt; domains.[6] Because of this, thinking about phase-separated lipid bilayers as finite-sized periodic 2D hexagonal lattices seems quite reasonable, as this should be similar to the conditions of a lipid bilayer simulation.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gpantel.github.io/analysis-method/mixent/&quot;&gt;In a previous post&lt;/a&gt; I discussed the measurement of lipid mixing entropy using voronoi tessellations of lipid leaflets. The very same definition of mixing entropy will be used here for the binary case (&lt;em&gt;E&lt;/em&gt;=2),&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;S_{mix} = -p_1 \log_2(p_1) -p_2 \log_2(p_2),&lt;/script&gt;

&lt;p&gt;in which &lt;script type=&quot;math/tex&quot;&gt;p_1&lt;/script&gt; corresponds to the fraction of contacts between lipids of the same type and &lt;script type=&quot;math/tex&quot;&gt;p_2&lt;/script&gt; to the fraction betweens lipids of a different type.&lt;/p&gt;

&lt;p&gt;A phase separation is necessarily defined by an interface. In this case, we consider the phase separation to manifest a linear interface, partitioning the system to left and right sides, as occurs in MD simulations of lipid phase separation. Assuming there are &lt;em&gt;N&lt;/em&gt; lipids in the monolayer, and the x- and y-dimensions of the system are equal (as they are in the vast majority of lipid membrane simulation literature), each interface will be composed of &lt;script type=&quot;math/tex&quot;&gt;\sqrt{N}&lt;/script&gt; lipids, such that the interfaces contain &lt;script type=&quot;math/tex&quot;&gt;2\sqrt{N}&lt;/script&gt; lipids in total.&lt;/p&gt;

&lt;p&gt;In a phase separation in which the two domains are truly pure, the only contribution to mixing entropy will come from the interface, and because the interface is dependent on the number of lipids, &lt;em&gt;N&lt;/em&gt;, the mixing entropy of a phase separation is dependent on &lt;em&gt;N&lt;/em&gt;. As such, it happens that &lt;script type=&quot;math/tex&quot;&gt;p_1 = (N - 2\sqrt{N} + 2\frac{2}{3}\sqrt{N})/N&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;p_2 = (2\frac{1}{3}\sqrt{N})/N&lt;/script&gt;. The following figure illustrates this point:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Membrane/PureInterfaceCartoon.jpg&quot; alt=&quot;Pure Interface Cartoon&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure:&lt;/strong&gt; Illustration of a pure binary phase separation on a hexagonal lattice. The two types of lipids are represented in red and blue, respectively, and the interfaces between domains are drawn with a bold green line.&lt;/p&gt;

&lt;p&gt;To determine the mixing entropy of a system at 50% miscibility, or more precisely, where the system should be expected to exhibit 50% of its maximum fluorescence, we add in a background “phase” consisting 50% of all lipids in an ideally-mixed (miscible) state, such that the remaining, pure domains of the system would contribute 50% of the maximum fluorescence signal. This requires the definition of an additional interface between pure and mixed phases, and the contribution of the ideally-mixed domian to the mixing entropy.&lt;/p&gt;

&lt;p&gt;While developing the 50% miscibility case, we may as well write equations that describe &lt;script type=&quot;math/tex&quot;&gt;S_\mathrm{mix}&lt;/script&gt; as dependent on any % miscibility as well. We can introduce another parameter, &lt;script type=&quot;math/tex&quot;&gt;\Phi = \frac{\%\ miscibility}{100\%}&lt;/script&gt; to represent the miscibility. Lipids involved in the interface between pure and mixed phases contribute &lt;script type=&quot;math/tex&quot;&gt;\frac{7}{10}\sqrt{N}/N&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;p_1&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;\frac{3}{10}\sqrt{N}/N&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;p_2&lt;/script&gt; while lipids in the ideally mixed phase contribute &lt;script type=&quot;math/tex&quot;&gt;\frac{1}{2}N_\mathrm{D}\Phi/N&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;p_1&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;p_2&lt;/script&gt;, where &lt;script type=&quot;math/tex&quot;&gt;N_\mathrm{D} = N - 3\sqrt{N}&lt;/script&gt;, the number of lipids with phases that are not at an interface (we lose one pure-pure interface when introducing the ideally mixed phase):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Membrane/ImpureDomainAddition.jpg&quot; alt=&quot;Pure Interface Cartoon&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure:&lt;/strong&gt; Illustration of pure domains in a binary mixture coexisting with an ideally-mixed domain composing a fraction (&lt;script type=&quot;math/tex&quot;&gt;\Phi&lt;/script&gt;) of the system. The two types of lipids are represented in red and blue, respectively, the interfaces between pure domains are drawn with a bold green line, and the interfaces between ideally-mixed and pure domains are drawn with a bold cyan line.&lt;/p&gt;

&lt;p&gt;With these additions, we can write&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;p_1 = \left( \left(N_\mathrm{D} - N_\mathrm{D}\Phi \right) + \frac{1}{2}N_\mathrm{D}\Phi + \frac{2}{3}\sqrt{N} + 2 \frac{7}{10}\sqrt{N} \right) / N&lt;/script&gt;,
&lt;script type=&quot;math/tex&quot;&gt;p_2 = \left( \frac{1}{2}N_\mathrm{D}\Phi + \frac{1}{3}\sqrt{N} + 2 \frac{3}{10}\sqrt{N} \right) / N&lt;/script&gt;,&lt;/p&gt;

&lt;p&gt;which may be used to determine the mixing entropy, &lt;script type=&quot;math/tex&quot;&gt;S_{mix}&lt;/script&gt; corresponding to some % miscibility, and vice-versa. This allows us to describe the “extent of mixing” of these systems in a way that is easy to conceptualize, and is directly relateable to experiment, from the results of lipid bilayer simulations.&lt;/p&gt;

&lt;p&gt;Last, for fun, let’s see how several different amounts of miscible phase change with &lt;em&gt;N&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Membrane/MiscibilityMixingEntropyN.png&quot; alt=&quot;Pure Interface Cartoon&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure&lt;/strong&gt;: Binary mixing entropies computed for various amounts of ideally-mixed domain as they depend on &lt;script type=&quot;math/tex&quot;&gt;N&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;We can see that &lt;script type=&quot;math/tex&quot;&gt;\sqrt{10}&lt;/script&gt; is very special. This is because &lt;script type=&quot;math/tex&quot;&gt;\sqrt{10}&lt;/script&gt; is the inflection point in the positive domain of the function &lt;script type=&quot;math/tex&quot;&gt;\sqrt{N}&lt;/script&gt;. Small values such as 10 are far, far too small to experience macroscopic phase separation, so this point does not matter very much.&lt;/p&gt;

&lt;p&gt;For more details on finite size effects in lipid bilayer phase separation, I urge you to read our recent work in JCP:
G.A. Pantelopulos, T. Nagai, A. Bandara, A. Panahi, &amp;amp; J.E. Straub “Critical size dependence of domain formation observed in coarse-grained simulations of bilayers composed of ternary lipid mixtures,” &lt;em&gt;J. Chem. Phys.&lt;/em&gt;  &lt;strong&gt;147&lt;/strong&gt;, 095101 (2017)&lt;/p&gt;

&lt;p&gt;Also, a special thank you to Tetsuro Nagai for helpful discussion about this post.&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;O. Bakht, P. Pathak, &amp;amp; E. London “Effect of the Structure of Lipids Favoring Disordered Domain Formation on the Stability of Cholesterol-Containing Ordered Domains (Lipid Rafts): Identification of Multiple Raft-Stabilization Mechanisms.,” &lt;em&gt;Biophys. J.&lt;/em&gt; &lt;strong&gt;93&lt;/strong&gt;, 4307–4318 (2007).&lt;/li&gt;
  &lt;li&gt;Megha, O. Bakht, &amp;amp; E. London “Cholesterol precursors stabilize ordinary and ceramide-rich ordered lipid domains (lipid rafts) to different degrees: Implications for the bloch hypothesis and sterol biosynthesis disorders,” &lt;em&gt;J. Biol. Chem.&lt;/em&gt; &lt;strong&gt;281&lt;/strong&gt;, 21903–21913 (2006).&lt;/li&gt;
  &lt;li&gt;S.L. Veatch, &amp;amp; S.L. Keller “Separation of Liquid Phases in Giant Vesicles of Ternary Mixtures of Phospholipids and Cholesterol,” &lt;em&gt;Biophys. J.&lt;/em&gt; &lt;strong&gt;85&lt;/strong&gt;, 3074–3083 (2003).&lt;/li&gt;
  &lt;li&gt;S.L. Veatch, &amp;amp; S.L. Keller “Seeing spots: Complex phase behavior in simple membranes,” &lt;em&gt;Biochim. Biophys. Acta - Mol. Cell Res.&lt;/em&gt; &lt;strong&gt;1746&lt;/strong&gt;, 172–185 (2005).&lt;/li&gt;
  &lt;li&gt;K. Kim,  S.Q. Choi, Z.A. Zell, T.M. Squires, &amp;amp; J.A. Zasadzinski “Effect of cholesterol nanodomains on monolayer morphology and dynamics,” &lt;em&gt;Proc. Natl. Acad. Sci.&lt;/em&gt; &lt;strong&gt;110&lt;/strong&gt;, E3054–E3060 (2013).&lt;/li&gt;
  &lt;li&gt;M.C. Blosser, A.R. Honerkamp-Smith, T. Han, M. Haataja, &amp;amp; S.L. Keller “Transbilayer Colocalization of Lipid Domains Explained via Measurement of Strong Coupling Parameters,” &lt;em&gt;Biophys. J.&lt;/em&gt; &lt;strong&gt;109&lt;/strong&gt;, 2317–2327 (2015).&lt;/li&gt;
&lt;/ol&gt;</content><author><name>George A. Pantelopulos</name><email>gpantel@bu.edu</email></author><summary type="html">I discuss the definition of lipid miscibility point used in experiment and determine the equivalent size-depedndent binary mixing entropy for a 2D lattice.</summary></entry><entry><title type="html">Lipid Mixing Entropy with Voronoi Tessellation</title><link href="http://localhost:4000/analysis-method/mixent/" rel="alternate" type="text/html" title="Lipid Mixing Entropy with Voronoi Tessellation" /><published>2017-06-23T20:00:00-04:00</published><updated>2017-06-23T20:00:00-04:00</updated><id>http://localhost:4000/analysis-method/mixent</id><content type="html" xml:base="http://localhost:4000/analysis-method/mixent/">&lt;p&gt;I discuss mixing entropy as an order parameter for lipid mixing and describe a Voronoi tessellation-based method and calculation using MDAnalysis and scipy.&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; async=&quot;&quot; src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;
&lt;/script&gt;

&lt;h1 id=&quot;lateral-heterogeneity-in-the-cell-membrane&quot;&gt;Lateral Heterogeneity in the Cell Membrane&lt;/h1&gt;

&lt;p&gt;Membranes are composed of an incredibly complicated mixture of proteins, lipids, and glycomolecules. There can be many domains of molecules over the surface of the membrane which are structurally distinct. Protein structures and thus functions can be different depending on what kind of domain they sit within. For many years people have worked to understand how these domains form.&lt;/p&gt;

&lt;p&gt;There are over one hundred lipids that may compose a cell membrane. These mix together, increasing the entropy of the mixture until the enthalpic benefit of interacting with similar lipids and the entropic benefit of mixing with different lipids balance out.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Membrane/thykaloid_marrink.jpeg&quot; alt=&quot;Marrink thykaloid&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure:&lt;/strong&gt; Complex mixture of a plant membrane constructed with coarse-grained lipids by &lt;a href=&quot;http://cgmartini.nl/&quot;&gt;Marrink and coworkers.&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;lipid-mixing-entropy&quot;&gt;Lipid Mixing Entropy&lt;/h1&gt;

&lt;p&gt;To quantify how “mixed” a lipid membrane is, many have employed a measure of “mixing entropy” (&lt;em&gt;S&lt;sub&gt;mix&lt;/sub&gt;&lt;/em&gt;). The most common way this has been done is by gridding each leaflet of the membrane in to &lt;em&gt;M&lt;/em&gt;  regions and counting the fraction of each j&lt;sup&gt;th&lt;/sup&gt; lipid (&lt;em&gt;p&lt;sub&gt;j&lt;/sub&gt;&lt;/em&gt;) within each i&lt;sup&gt;th&lt;/sup&gt; region, and then taking the mean of the entropies calculated for all regions[1]:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;S_{mix} = -\frac{1}{N_{regions}} \sum^{N_{regions}}_{i=1} \sum^{M}_{j=1} p_j(i) \log(p_j(i))&lt;/script&gt;

&lt;p&gt;However, this method is limited in that the solution is dependent on how the system is split into these regions. Other methods rely on the identification of nearest neighbors requiring selection of cutoffs for neighbor detection or separation of the system into regions.[2] Ideally, the mixing entropy should be measured without any kind of cutoff or gridding scheme that can influence the result.&lt;/p&gt;

&lt;h1 id=&quot;voronoi-edge-lipid-mixing-entropy&quot;&gt;Voronoi Edge Lipid Mixing Entropy&lt;/h1&gt;

&lt;p&gt;In a 2017 paper about finite size effects of lipid domain formation we developed and employed a novel method of evaluating mixing entropy using Voronoi tessellations of lipid head groups. This method is quite simple in that it involves counting Voronoi edges formed between pairs of lipids. With this method there is no need to separate the system in to regions or to use arbitrary cutoffs for determining the neighbors of lipids. The mixing entropy is simply written as&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;S_{mix} = -\sum^{E}_{j=1} p_j \log_E(p_j),&lt;/script&gt;

&lt;p&gt;where there are &lt;em&gt;E&lt;/em&gt; types of voronoi edges and we find the probability of the j&lt;sup&gt;th&lt;/sup&gt; type of voronoi edge. These “types” of voronoi edges are unique types of contacts formed by a pair of lipids sharing a voronoi edge. For example, lipidA-lipidA, lipidB-lipidB, …, lipidZ-lipidZ are all the same kind of voronoi edge – they are edges between the same type of lipid to the same type of lipid. However, lipidA-lipidB, lipidA-lipidC, lipidB-lipidC are all different types of edges. As such, in a two-lipid system &lt;em&gt;E&lt;/em&gt;=2, in a three-lipid system &lt;em&gt;E&lt;/em&gt;=4, in a four-lipid system &lt;em&gt;E&lt;/em&gt;=7, in a five-lipid system &lt;em&gt;E&lt;/em&gt;=11 and so on. The log is in the base of &lt;em&gt;E&lt;/em&gt; such that the maximum value of &lt;em&gt;S&lt;sub&gt;mix&lt;/sub&gt;&lt;/em&gt; is always 1.&lt;/p&gt;

&lt;p&gt;In recently submitted work we used this method to calculate the mixing entropy only considering DPPC and DIPC lipids in a ternary mixture which includes cholesterol. As such, we only evaluated DPPC-DPPC = DIPC-DIPC and DPPC-DIPC Voronoi edges.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Membrane/SmixTesselExample.png&quot; alt=&quot;Smix Tessel Example&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure&lt;/strong&gt; (Left) Visualization of a Voronoi Tessellation of lipid head group (x,y) coordinates (blue) in a slice of a  DPPC (purple), DIPC (pink), and cholesterol (black) mixture. (Right) Cartoon showing each type of voronoi edge when evaluating mixing entropy of only DPPC and DIPC.&lt;/p&gt;

&lt;p&gt;A python implementation of this method (with contribution from &lt;a href=&quot;https://scholar.google.com/citations?user=fdnxyPwAAAAJ&amp;amp;hl=en&quot;&gt;Asanga Bandara&lt;/a&gt;) used to tessel DPPC-DIPC-CHOL mixtures in the Martini coarse-grained model using scipy, MDAnalysis to get (x,y) coordinates of lipid head groups, and multiprocessing for parallization with OpenMP is available &lt;a href=&quot;https://github.com/gpantel/MD_methods-and-analysis/blob/master/membrane_analysis/ternary_lipid_voronoi_edges.py&quot;&gt;on my github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please cite:&lt;br /&gt;
G.A. Pantelopulos, T. Nagai, A. Bandara, A. Panahi, &amp;amp; J.E. Straub “Critical size dependence of domain formation observed in coarse-grained simulations of bilayers composed of ternary lipid mixtures,” &lt;em&gt;J. Chem. Phys.&lt;/em&gt;  &lt;strong&gt;147&lt;/strong&gt;, 095101 (2017)&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;M. Camesasca, M. Kaufman, &amp;amp; I. Manas-Zloczower “Quantifying Fluid Mixing with the Shannon Entropy,” &lt;em&gt;Macromol. Theory Simulations&lt;/em&gt; &lt;strong&gt;15&lt;/strong&gt; 595–607 (2006).&lt;/li&gt;
  &lt;li&gt;G.B. Brandani, M. Schor, C.E. MacPhee, H. Grubmuller, U. Zachariae, &amp;amp; D. Marenduzzo  “Quantifying Disorder through Conditional Entropy: An Application to Fluid Mixing,” &lt;em&gt;PLoS One&lt;/em&gt; &lt;strong&gt;8&lt;/strong&gt; e65617 (2013).&lt;/li&gt;
&lt;/ol&gt;</content><author><name>George A. Pantelopulos</name><email>gpantel@bu.edu</email></author><summary type="html">I discuss mixing entropy as an order parameter for lipid mixing and describe a Voronoi tessellation-based method and calculation using MDAnalysis and scipy.</summary></entry><entry><title type="html">2D Bond-Orientational Order for Lipid Membranes</title><link href="http://localhost:4000/analysis-method/2D_boo/" rel="alternate" type="text/html" title="2D Bond-Orientational Order for Lipid Membranes" /><published>2017-06-09T12:25:00-04:00</published><updated>2017-06-09T12:25:00-04:00</updated><id>http://localhost:4000/analysis-method/2D_boo</id><content type="html" xml:base="http://localhost:4000/analysis-method/2D_boo/">&lt;p&gt;I discuss the use of 2D Bond-Orientational Order to describe lipid phase in membrane and the use of projections to address membrane undulation when measuring.&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; async=&quot;&quot; src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;
&lt;/script&gt;

&lt;h1 id=&quot;the-2d-bond-orientational-order-parameter&quot;&gt;The 2D Bond-Orientational Order Parameter&lt;/h1&gt;

&lt;p&gt;This past year, the famous 2D Bond-Orientational Order parameter, originally developd by Nelson and Halperin,[1] recieved some of the spotlight as part of the Nobel Prize in Physics, awarded to Thouless, Haldane, and Kosterlitz &lt;a href=&quot;https://www.nobelprize.org/nobel_prizes/physics/laureates/2016/press.html&quot;&gt;”for theoretical discoveries of topological phase transitions and topological phases of matter.”&lt;/a&gt; It has been used to describe solid, “hexatic”, and liquid phases of 2D systems. To describe bond-orientations of &lt;em&gt;n&lt;/em&gt;-fold order around the &lt;em&gt;k&lt;/em&gt;th particle in a system with &lt;em&gt;n&lt;/em&gt; nearest neighbors, each indexed as &lt;em&gt;l&lt;/em&gt;, the order parameter is:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\Psi_n^k = \sum^n_{l\ \epsilon\ nn(k)} \exp[in\theta_{lk}] = \sum^n_{l\ \epsilon\ nn(k)} \cos(n\theta_{lk}) + i\sin(n\theta_{lk})&lt;/script&gt;

&lt;p&gt;But typically only &lt;script type=&quot;math/tex&quot;&gt;\Psi_6^k&lt;/script&gt; is used as an order parameter:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\Psi_6^k = \sum^n_{l\ \epsilon\ nn(k)} \exp[i6\theta_{lk}]&lt;/script&gt;

&lt;p&gt;where the angle &lt;script type=&quot;math/tex&quot;&gt;\theta_{lk}&lt;/script&gt; is evaluated using an arbitrary, constant reference vector. By doing this measurement, we get a complex vector which tells us the orientation of the hexagon and when we take norm of this complex vector (|&lt;script type=&quot;math/tex&quot;&gt;\Psi_6^k&lt;/script&gt;|) we get a number between 0 and 1 which tells us how close to a hexagon the orientation of &lt;em&gt;l&lt;/em&gt; points around &lt;em&gt;k&lt;/em&gt; are.&lt;/p&gt;

&lt;p&gt;Often when I’ve explained this order parameter to a colleague in chemistry it has been difficult to help them understand. Please see the following illustration, which should help your understanding of &lt;script type=&quot;math/tex&quot;&gt;\Psi_6^k&lt;/script&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Membrane/Psi6_illustration.jpg&quot; alt=&quot;Illutration of Psi6&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure:&lt;/strong&gt; (Left) Illustration of a particle &lt;em&gt;k&lt;/em&gt; and it’s six nearest neighbors, indexed by &lt;em&gt;l&lt;/em&gt;, along with the reference vector, which is often selected to be (x,y) = (1,0). (Right) The orientation of the conceptual hexagon defined by nearest neighbors of &lt;em&gt;k&lt;/em&gt;, which can be described by the real (or imaginary) parts of &lt;script type=&quot;math/tex&quot;&gt;\Psi_6^k&lt;/script&gt;.&lt;/p&gt;

&lt;h1 id=&quot;psi_6k-and-positional-pair-correlation-functions-are-used-to-describe-phases-in-2d&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;\Psi_6^k&lt;/script&gt; and positional pair correlation functions are used to describe phases in 2D&lt;/h1&gt;

&lt;p&gt;For many years the character of 2D phase transitions in hard disks (2D circles that cannot overlap each-other but have no attractive or repulsive forces) has been debated. A 2011 &lt;a href=&quot;http://www.lps.ens.fr/~krauth/index.php/Bernard_Krauth_2011&quot;&gt;paper by Barnard and Krauth&lt;/a&gt;, along with some follow-up papers, seem to have put the debate to rest.[2]&lt;/p&gt;

&lt;p&gt;Pair-wise distance (&lt;em&gt;r&lt;/em&gt;) correlation functions of &lt;script type=&quot;math/tex&quot;&gt;\Psi_6^k&lt;/script&gt; (&lt;em&gt;g&lt;sub&gt;6&lt;/sub&gt;&lt;/em&gt;(&lt;em&gt;r&lt;/em&gt;)) and position (&lt;em&gt;g&lt;sub&gt;G&lt;/sub&gt;&lt;/em&gt;(&lt;em&gt;r&lt;/em&gt;)) have been used to identify solid, hexatic, and liquid 2D phases. This is done based on the functional form of decay of the correlation over pair-wise distance in the Kosterlitz-Thouless-Halperin-Nelson-Young (KTHNY) theory of 2D melting:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Membrane/2D_phase_paircorrelations.jpg&quot; alt=&quot;Illutration of Psi6&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure&lt;/strong&gt; Example Voronoi tessellations of 2D systems in the solid, hexatic, and liquid state. Pair correlation functions of position (&lt;em&gt;g&lt;sub&gt;G&lt;/sub&gt;&lt;/em&gt;(&lt;em&gt;r&lt;/em&gt;)) and &lt;script type=&quot;math/tex&quot;&gt;\Psi_6^k&lt;/script&gt; (&lt;em&gt;g&lt;sub&gt;6&lt;/sub&gt;&lt;/em&gt;(&lt;em&gt;r&lt;/em&gt;)). &lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
T^* = k_{\text{B}}T/&lt;U&gt; %]]&gt;&lt;/script&gt;. Voronoi tessellations credited to &lt;a href=&quot;https://grasp-lab.org/2013/06/18/hexatic/&quot;&gt;N. Vandewalle at GRASP&lt;/a&gt;.[3]&lt;/p&gt;

&lt;h1 id=&quot;interest-in-lipid-bilayers&quot;&gt;Interest in lipid bilayers&lt;/h1&gt;

&lt;p&gt;We may use this order parameter as a method to distinguish the thermodynamic phase of lipids. In the case of lipid phase separations to liquid ordered (L&lt;sub&gt;o&lt;/sub&gt;) and disordered (L&lt;sub&gt;d&lt;/sub&gt;) domains, we are able to see that the packing of each lipid (|&lt;script type=&quot;math/tex&quot;&gt;\Psi_6^k&lt;/script&gt;|) is clearly different between phases, though the bond-orientations of lipids (&lt;script type=&quot;math/tex&quot;&gt;\Psi_6^k&lt;/script&gt;) are uncorrelated, as expected of any liquid state.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Membrane/2D_boo_phaseseparated.jpg&quot; alt=&quot;Phase separated 2D boo&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure&lt;/strong&gt; Tessellations of a phase separated 5406-lipid bilayer. Blue, red, and white dots represent lipid tails belonging to DPPC, DIPC, and CHOL lipids in the membrane. (Left) |&lt;script type=&quot;math/tex&quot;&gt;\Psi_6^k&lt;/script&gt;| shows clear separation between the &lt;em&gt;packing&lt;/em&gt; lipid domains, though &lt;script type=&quot;math/tex&quot;&gt;\Psi_6^k&lt;/script&gt; shows the &lt;em&gt;bond-orientation&lt;/em&gt; of lipids is not substantially different between L&lt;sub&gt;o&lt;/sub&gt; and L&lt;sub&gt;d&lt;/sub&gt; phases.&lt;/p&gt;

&lt;p&gt;We should also consider the following: Lipid bilayers are not simply 2D. There are undulations to the membrane surface that would, if not addressed, distort the measurement of &lt;script type=&quot;math/tex&quot;&gt;\Psi_6^k&lt;/script&gt;, as angles from the reference vector would include height mismatchings of the measured atoms. I address this via a plane fitting approach.&lt;/p&gt;

&lt;h1 id=&quot;plane-fitted-measurement-of-psi_6k&quot;&gt;Plane-fitted measurement of &lt;script type=&quot;math/tex&quot;&gt;\Psi_6^k&lt;/script&gt;&lt;/h1&gt;

&lt;p&gt;To address height mismatches of a lipid tail’s nearest neighbors, I fit a lipid tail and its six nearest neighbors to a plane of best fit, project the coordinates and reference vector into the plane, and measure &lt;script type=&quot;math/tex&quot;&gt;\Psi_6^k&lt;/script&gt; there.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Membrane/Plane_fitting.jpg&quot; alt=&quot;NN plane Fitting&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure:&lt;/strong&gt; Coordinate representing a MARTINI lipid tail with coordinates representing its six nearest neighhbor tails transformed to lie on a plane that best-fits all seven points. The reference vector is transformed to lie in the plane as well. In this particular application, C2A, C2B (D2A, D2B) beads of DPPC (DIPC) are selected and the centroid of R[1-5] of CHOL are selected to represent lipid tails.&lt;/p&gt;

&lt;p&gt;If you’d like to check out an example script written to analyze MARTINI DPPC, DIPC, and CHOL lipid membranes using the MDAnalysis library to find these coordinates, please check out my &lt;a href=&quot;https://github.com/gpantel/MD_methods-and-analysis/blob/master/membrane_analysis/psi6_MARTINI_tail_example.py&quot;&gt;github&lt;/a&gt;. There, plane fitting is performed using &lt;a href=&quot;https://www.ltu.se/cms_fs/1.51590!/svd-fitting.pdf&quot;&gt;singular value decomposition of the coordinates&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Additionally, this past year saw a very nice use of &lt;script type=&quot;math/tex&quot;&gt;\Psi_6^k&lt;/script&gt; to describe a “hexatic-like” lipid phase of DPPC with the MARTINI coarse-grained model. It’s a pretty cool read.[4]&lt;/p&gt;

&lt;p&gt;Please cite:&lt;br /&gt;
G.A. Pantelopulos, T. Nagai, A. Bandara, A. Panahi, &amp;amp; J.E. Straub “Critical size dependence of domain formation observed in coarse-grained simulations of bilayers composed of ternary lipid mixtures,” &lt;em&gt;J. Chem. Phys.&lt;/em&gt;  &lt;strong&gt;147&lt;/strong&gt;, 095101 (2017)&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;B.I. Halperin &amp;amp; D.R. Nelson “Theory of Two-Dimensional melting,” &lt;em&gt;Phys. Rev. Lett.&lt;/em&gt; &lt;strong&gt;41&lt;/strong&gt;, 121–124 (1978).&lt;/li&gt;
  &lt;li&gt;E.P. Bernard &amp;amp; W. Krauth “Two-Step Melting in Two Dimensions: First-Order Liquid-Hexatic Transition,” &lt;em&gt;Phys. Rev. Lett.&lt;/em&gt; &lt;strong&gt;107&lt;/strong&gt;, 155704 (2011).&lt;/li&gt;
  &lt;li&gt;J. Schockmel, E. Mersch, N. Vandewalle, &amp;amp; G. Lumay, “Melting of a confined monolayer of magnetized beads,” &lt;em&gt;Phys. Rev. E - Stat. Nonlinear, Soft Matter Phys.&lt;/em&gt; &lt;strong&gt;87&lt;/strong&gt;, 1–7 (2013).&lt;/li&gt;
  &lt;li&gt;S. Katira,  K.K. Mandadapu, S. Vaikuntanathan, B. Smit, &amp;amp; D. Chandler “Pre-transition effects mediate forces of assembly between transmembrane proteins,” &lt;em&gt;Elife&lt;/em&gt; &lt;strong&gt;5&lt;/strong&gt;, 1–8 (2016).&lt;/li&gt;
&lt;/ol&gt;</content><author><name>George A. Pantelopulos</name><email>gpantel@bu.edu</email></author><summary type="html">I discuss the use of 2D Bond-Orientational Order to describe lipid phase in membrane and the use of projections to address membrane undulation when measuring.</summary></entry><entry><title type="html">Measuring Structural Order Parameters in Intra- and Interleaflet Lipid Clusters</title><link href="http://localhost:4000/analysis-method/domain_clustering/" rel="alternate" type="text/html" title="Measuring Structural Order Parameters in Intra- and Interleaflet Lipid Clusters" /><published>2017-06-07T14:20:00-04:00</published><updated>2017-06-07T14:20:00-04:00</updated><id>http://localhost:4000/analysis-method/domain_clustering</id><content type="html" xml:base="http://localhost:4000/analysis-method/domain_clustering/">&lt;p&gt;I discuss use of hierarchical clustering to identify intra- and inter-leaflet clusters of lipids and analysis using MDAnalysis, scipy, and multiprocessing.&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; async=&quot;&quot; src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;
&lt;/script&gt;

&lt;h1 id=&quot;lipid-phase-separation&quot;&gt;Lipid phase separation&lt;/h1&gt;

&lt;p&gt;The phase separation of complex mixtures of lipids in cell membranes has been the subject of hundreds of investigations. This phase separation can cause for the formation of “domains” of lipids in &lt;em&gt;different thermodynamic phases&lt;/em&gt;. Liquid ordered (L&lt;sub&gt;o&lt;/sub&gt;) and liquid disordered (L&lt;sub&gt;d&lt;/sub&gt;) phases have been the subject of many studies. A very simplified concept of phase separation is that, in a mixed state, all of the membrane exists in the L&lt;sub&gt;d&lt;/sub&gt; phase, but as high melting temperature lipids (e.g. saturated lipids, sphingomyelin) aggregate together with cholesterol, the L&lt;sub&gt;o&lt;/sub&gt; phase is formed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Membrane/Domain_Schematic_RB.jpg&quot; alt=&quot;Domain Schematic&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure:&lt;/strong&gt; Illustration of a macroscopic phase separation in a ternary lipid mixture with proteins.&lt;/p&gt;

&lt;p&gt;Of course, proteins can adopt different folded structures depending on the thermodynamic phase they sit within, and understanding the true structure of the environment membrane proteins encounter is essential to the ultimate goal of understanding and manipulating the cell membrane.&lt;/p&gt;

&lt;h1 id=&quot;understanding-the-structure-of-lipid-domains&quot;&gt;Understanding the structure of lipid domains&lt;/h1&gt;

&lt;p&gt;Using molecular dynamics simulations we can understand the structure of lipids at any point in time. With such detailed information we can ask questions like “How does the structure of a lipid depend on the &lt;em&gt;size&lt;/em&gt; of a domain?”&lt;/p&gt;

&lt;p&gt;Of course we could answer this question as-is, but there is someting else very important to consider… lipid bilayers are a &lt;em&gt;bilayer&lt;/em&gt; – the distribution of lipids is not perfectly symmetric across the two leaflets. So we should consider how many lipids are part of a domain in reference to each side of the membrane. This is to say, we should decompose the number of lipids involved in a domain into intra- and inter-leaflet lipids, and then measure the mean structural order for all lipids as dependent on the number of intra- (&lt;em&gt;n&lt;/em&gt;) and inter- (&lt;em&gt;m&lt;/em&gt;) leaflet lipids in the domain.&lt;/p&gt;

&lt;p&gt;Currently, only coarse-grained models of lipid mixtures can reach an equilibrium spatial and structural distribution. I use the DPPC:DIPC:CHOL mixture in the MARTINI coarse-grained forcefield to study some general feature of phase separation. Many other people do, too.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Membrane/Martini_models.jpg&quot; alt=&quot;Domain Schematic&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure:&lt;/strong&gt; (Left) Atomistic DPPC (130 atoms!) (Center) Schematic of MARTINI lipid bead names and restraints that cause for formation of different phases (12 atoms and ~10x larger integration time-step than atomistic!) (Right) CHOL model from Melo et. al. [1] is very rigid and uses virtual sites (v).&lt;/p&gt;

&lt;h1 id=&quot;clustering-lipids&quot;&gt;Clustering lipids&lt;/h1&gt;

&lt;p&gt;How do we cluster lipids to discover these domains? Most clutering algorithms require an input of &lt;em&gt;k&lt;/em&gt; numbers of clusters to be assigned. In our case, we don’t know how many clusters exist in the membrane at any point of time. We can use &lt;a href=&quot;https://en.wikipedia.org/wiki/Single-linkage_clustering&quot;&gt;hierarchical single-link distance-based clustering&lt;/a&gt; (HCA), because it’s easy to understand, easy to use, and makes no assumption of the number of clusters. Also, it’s in &lt;a href=&quot;ihttps://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.cluster.hierarchy.fclusterdata.html#scipy.cluster.hierarchy.fclusterdata&quot;&gt;scipy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Studies of lipid domain formation are typically initated from an ideally-mixed state where all lipids are in a L&lt;sub&gt;d&lt;/sub&gt; thermodynamic phase. The L&lt;sub&gt;o&lt;/sub&gt; thermodynamic phase forms as high melting temperature lipids (e.g. DPPC) and cholesterol (CHOL) aggregate. As such, I am only analyzing domains formed from DPPC and cholesterol. Additionally, DPPC and CHOL pack together most tightly about the lipid tails. Because DPPC has two lipid tails, I cluster each lipid tail individually.&lt;/p&gt;

&lt;p&gt;I perform this clustering by&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Identifying all clusters of intra-leaflet lipids tails (C2A and C2B beads on DPPC, centroid of R[1-5] on CHOL) using HCA with a cutoff of 5.8 angstroms.&lt;/li&gt;
  &lt;li&gt;For each intra-leaflet cluster, identify lipids in contact on the opposite leaflet by discovering lipid tails (C2A and C2B beads on DPPC, centroid of R[1-5] on CHOL) within a cutoff of 7.0 angstroms.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/Membrane/n_m_schematic.jpg&quot; alt=&quot;Domain Schematic&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure&lt;/strong&gt; (Left) Illustration of one state of a ternay lipid bilayer of DPPC (blue), DIPC (red) and CHOL (black) with clusters identified in reference to the top leaflet. (Right) Representation of the lipid bilayer configuration at maximum values of &lt;em&gt;n&lt;/em&gt; and &lt;em&gt;m&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;On these clusters I analyze the liquid crystal order parameter &lt;script type=&quot;math/tex&quot;&gt;P_2&lt;/script&gt; and the bond-orientational order parameter &lt;script type=&quot;math/tex&quot;&gt;\Psi_6&lt;/script&gt;. &lt;a href=&quot;https://gpantel.github.io/analysis-method/2D_boo/&quot;&gt;I discuss &lt;script type=&quot;math/tex&quot;&gt;\Psi_6&lt;/script&gt; in another post&lt;/a&gt;. The mean order parameter of each cluster is evaluated, such that we have order parameters dependent on (&lt;em&gt;n,m&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;A script which implements all of these measurements is available on &lt;a href=&quot;https://github.com/gpantel/MD_methods-and-analysis/blob/master/membrane_analysis/compute_n_m_DPPC%2BDIPC%2BCHOL.py&quot;&gt;my github&lt;/a&gt;, which can easily be modified to perform this very same analysis with some other selected molecules. Feel free to message me if you’d like help to do this, but please read the comments first!&lt;/p&gt;

&lt;p&gt;Please cite:&lt;br /&gt;
G.A. Pantelopulos, T. Nagai, A. Bandara, A. Panahi, &amp;amp; J.E. Straub “Critical size dependence of domain formation observed in coarse-grained simulations of bilayers composed of ternary lipid mixtures,” &lt;em&gt;J. Chem. Phys.&lt;/em&gt;  &lt;strong&gt;147&lt;/strong&gt;, 095101 (2017)&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;M.N. Melo, H.I. Ingolfsson, &amp;amp; S.J. Marrink “Parameters for Martini sterols and hopanoids based on a virtual-site description,” &lt;em&gt;J. Chem. Phys.&lt;/em&gt; &lt;strong&gt;143&lt;/strong&gt; 243152 (2015).&lt;/li&gt;
&lt;/ol&gt;</content><author><name>George A. Pantelopulos</name><email>gpantel@bu.edu</email></author><summary type="html">I discuss use of hierarchical clustering to identify intra- and inter-leaflet clusters of lipids and analysis using MDAnalysis, scipy, and multiprocessing.</summary></entry><entry><title type="html">Mass-Scaling Simulated Tempering for Optimizing Time-steps</title><link href="http://localhost:4000/computational-method/MSST/" rel="alternate" type="text/html" title="Mass-Scaling Simulated Tempering for Optimizing Time-steps" /><published>2017-06-06T14:45:00-04:00</published><updated>2017-06-06T14:45:00-04:00</updated><id>http://localhost:4000/computational-method/MSST</id><content type="html" xml:base="http://localhost:4000/computational-method/MSST/">&lt;p&gt;The simulated and parallel tempering are briefly discussed. I explain the MSST method and present its implementation in OpenMM.&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; async=&quot;&quot; src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;
&lt;/script&gt;

&lt;h1 id=&quot;tempering&quot;&gt;Tempering&lt;/h1&gt;

&lt;p&gt;Sampling of the equilibrium state of a system with Hamiltonian &lt;em&gt;H&lt;sub&gt;i&lt;/sub&gt;&lt;/em&gt; can be hampered by barriers in the system free energy landscape. These barriers can be more easily crossed without prior knowledge of the free energy landscape via tempering the Hamiltonian.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/MSST/StrongTransitionPicture.jpg&quot; alt=&quot;Energy Landscape Example&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure:&lt;/strong&gt; The system order parameter at various realizations of a the Hamiltonian.&lt;/p&gt;

&lt;p&gt;The Hamiltonian is most commonly tempered by raising the system temperature (as the name implies).&lt;/p&gt;

&lt;h1 id=&quot;parallel-tempering-aka-replica-exchange-molecular-dynamics-remd&quot;&gt;Parallel Tempering aka Replica Exchange Molecular Dynamics (REMD)&lt;/h1&gt;

&lt;p&gt;With no prior knowledge of the system, parallel tempering with temperature is a simplistic method to quickly sample the equilibrium state of a Hamiltonian &lt;em&gt;H&lt;sub&gt;i&lt;/sub&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Typically, MD trajectories in each Hamiltonian are run in parallel and periodically swap temperature following the Metropolis-Hastings criterion.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;p = \text{min}\left(1,e^{(U_i - U_j)(\frac{1}{k_\text{B}T_i}  - \frac{1}{k_\text{B}T_j}) }\right)&lt;/script&gt;

&lt;p&gt;After successful temperature exchange, velocities are rescaled for what we should expect in the new temperature condition.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;v_i = v_i \sqrt{\frac{T_j}{T_i}},\quad  v_j = v_j \sqrt{\frac{T_i}{T_j}}&lt;/script&gt;

&lt;p&gt;The most typical method to attempt to exchange &lt;em&gt;i&lt;/em&gt; and &lt;em&gt;j&lt;/em&gt; simulation conditions is to alternatively select even and odd-numbered pairs of most-similar (neighboring) simulation conditions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/MSST/potential_overlap.jpg&quot; alt=&quot;REMD schematic&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure:&lt;/strong&gt; Illustration of REMD with temperature replicas using even-odd pair neighbor swapping.&lt;/p&gt;

&lt;h1 id=&quot;simulated-tempering-st&quot;&gt;Simulated Tempering (ST)&lt;/h1&gt;

&lt;p&gt;Running parallel trajectories can be extremely expensive, so much so that the computational efficiency of sampling might be less than that of a typical MD simulation.&lt;/p&gt;

&lt;p&gt;Simulated Tempering (ST) employs a single trajectory with a temperature exchange criterion intended to achieve a random walk in temperature, requiring knowledge of the free energy landscape. MC swaps are similar to parallel tempering:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;p = \text{min}\left(1,e^{(\frac{1}{k_\text{B}T_i}  - \frac{1}{k_\text{B}T_j})U_i + g(T_i) - g(T_j)}\right)&lt;/script&gt;

&lt;p&gt;Where &lt;em&gt;g&lt;/em&gt;(&lt;strong&gt;&lt;em&gt;T&lt;/em&gt;&lt;/strong&gt;) is parameterized to both achieve a random walk in temperature space and preserve balance. Velocities are also rescaled, as in REMD:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;v' = v \sqrt{\frac{T_j}{T_i}}&lt;/script&gt;

&lt;p&gt;&lt;em&gt;g&lt;/em&gt;(&lt;strong&gt;&lt;em&gt;T&lt;/em&gt;&lt;/strong&gt;) is most commonly determined by:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Sufficient sampling with parallel tempering to estimate &lt;em&gt;a&lt;/em&gt;(&lt;strong&gt;&lt;em&gt;T&lt;/em&gt;&lt;/strong&gt;) via WHAM or MBAR&lt;/li&gt;
  &lt;li&gt;On the fly using the Wang-Landau algorithm&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;http://openmm.org/&quot;&gt;OpenMM&lt;/a&gt; provides a very simple environment for writing efficient GPU-accelerated MD simulations.
GPU acceleration can enormously increase the computational efficiency of ST relative to REMD!&lt;/p&gt;

&lt;h1 id=&quot;mass-scaling-simulated-tempering-msst&quot;&gt;Mass-Scaling Simulated Tempering (MSST)&lt;/h1&gt;

&lt;p&gt;Molecular motion at high temperatures employed in tempering can require the use of small time-steps to avoid accumulative errors in kinetic energy. Time-step sizes can be scaled with temperature, but this is a needless cost.&lt;/p&gt;

&lt;p&gt;By manipulating the masses of all atoms in the system as dependent on temperature we can utilize one optimal time-step and which does not require velocity scaling!&lt;/p&gt;

&lt;p&gt;We may make all masses scale as &lt;script type=&quot;math/tex&quot;&gt;m_k(T_i) = m_{0,k}\frac{T_i}{T_0}&lt;/script&gt; where &lt;script type=&quot;math/tex&quot;&gt;m_0&lt;/script&gt; are the masses at initial the lowest temperature &lt;script type=&quot;math/tex&quot;&gt;T_0&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;As such, we have the kinetic energy: &lt;script type=&quot;math/tex&quot;&gt;K_i(v) = \sum^N_{k = 1}\frac{m_{0,k} \frac{T_i}{T_0}\mathbf{v}_k^2}{2}&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;And the ensemble weight factor: &lt;script type=&quot;math/tex&quot;&gt;w(q,v,T_i) = e^{-K_i(v)-U(q)/k_\text{B}T_i + g(T_i)} = \\ \text{exp} [{\sum^N_{k = 1}\frac{m_{0,k} \frac{T_i}{T_0}\mathbf{v}_k^2}{2 k_\text{B} T_i}-(U(q)/k_\text{B}T_i) + g(T_i)}]&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;in which we see that the velocity distributions are independent of temperature!&lt;/p&gt;

&lt;p&gt;Additionally, rather than scaling all masses in the system, a subset of the system may be mass-scaled by some arbitrary amount &lt;script type=&quot;math/tex&quot;&gt;\alpha&lt;/script&gt;, such that &lt;script type=&quot;math/tex&quot;&gt;m_k(T_i) = \alpha_{k,i} m_{0,k}\frac{T_i}{T_0}&lt;/script&gt; and velocities will then be re-scaled upon changing temperature as &lt;script type=&quot;math/tex&quot;&gt;v_k' = \sqrt{\frac{\alpha_{k,i}}{\alpha_{k,j}}} \sqrt{\frac{T_j}{T_i}} v_k&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Doing this of course causes the loss of the special ability to find one optimal time-step for the simulation, but it can help reduce errors in integration. Additionally, the scaling of separate groups of atoms, such as protein hydrogens and sidechains to decrease viscosity, has been used to enhance sampling in protein simulations.[1]&lt;/p&gt;

&lt;p&gt;In a 2016 paper,[2] we performed MSST simulations of LJ fluid, coarse-grained lipid simulation, and atomistic Trp-cage folding, demonstrating the ability to use longer time-steps and reduce integration errors.&lt;/p&gt;

&lt;p&gt;Below is detailed the MSST implementation workflow in OpenMM, for which there is an example application with Trp-cage folding following the classic protein folding paper by Simmerling et. al.[3] &lt;a href=&quot;https://github.com/gpantel/MD_methods-and-analysis/tree/master/MSST&quot;&gt;on my github&lt;/a&gt;. This is a “hack” of OpenMM head developer &lt;a href=&quot;https://github.com/peastman&quot;&gt;Peter Eastman&lt;/a&gt;’s simulatedtempering.py.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/MSST/MSST_workflow.jpg&quot; alt=&quot;MSST workflow&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Figure:&lt;/strong&gt; Workflow for the MSST implementation in OpenMM.&lt;/p&gt;

&lt;p&gt;The  MSST method, or its accompanying Mass-Scaling Replica Exchange Method,[4,5] may be used to lengthen the time-step of simulations employing tempering. In most cases the change to velocities will often not matter as tempering simulations are conducted to measure ensemble-averaged structural proterties, only dependent on &lt;script type=&quot;math/tex&quot;&gt;U(\mathbf{q})&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Please read and cite:&lt;br /&gt;
T. Nagai, G.A. Pantelopulos, T. Takahashi, &amp;amp; J.E. Straub “On the use of mass scaling for stable and efficient simulated tempering with molecular dynamics,” &lt;em&gt;J. Comp. Chem.&lt;/em&gt; &lt;strong&gt;27&lt;/strong&gt; 2017-2028 (2016).&lt;/p&gt;

&lt;p&gt;References:&lt;br /&gt;
[1] Lin, I.-C. &amp;amp; Tuckerman, M. E. “Enhanced Conformational Sampling of Peptides via Reduced Side-Chain and Solvent Masses,” &lt;em&gt;J. Phys. Chem. B&lt;/em&gt; &lt;strong&gt;114&lt;/strong&gt;, 15935–15940 (2010).&lt;br /&gt;
[2] T. Nagai, G.A. Pantelopulos, T. Takahashi, &amp;amp; J.E. Straub “On the use of mass scaling for stable and efficient simulated tempering with molecular dynamics,” &lt;em&gt;J. Comp. Chem.&lt;/em&gt; &lt;strong&gt;27&lt;/strong&gt; 2017-2028 (2016).
[3] Simmerling, C., Strockbine, B. &amp;amp; Roitberg, A. E. “All-atom structure prediction and folding simulations of a stable protein,” &lt;em&gt;J. Am. Chem. Soc.&lt;/em&gt; &lt;strong&gt;124&lt;/strong&gt;, 11258–11259 (2002).&lt;br /&gt;
[4] Nagai, T. &amp;amp; Takahashi, T. “Mass-scaling replica-exchange molecular dynamics optimizes computational resources with simpler algorithm,” &lt;em&gt;J. Chem. Phys.&lt;/em&gt; &lt;strong&gt;141&lt;/strong&gt;, (2014).&lt;br /&gt;
[5] Nagai, T. “General Formalism of Mass Scaling Approach for Replica-Exchange Molecular Dynamics and its Application,” &lt;em&gt;J. Phys. Soc. Japan&lt;/em&gt; &lt;strong&gt;86&lt;/strong&gt;, 14003 (2017).&lt;/p&gt;</content><author><name>George A. Pantelopulos</name><email>gpantel@bu.edu</email></author><summary type="html">The simulated and parallel tempering are briefly discussed. I explain the MSST method and present its implementation in OpenMM.</summary></entry></feed>